type Query {
  findFirstUsageStats(where: UsageStatsWhereInput, orderBy: [UsageStatsOrderByInput!], cursor: UsageStatsWhereUniqueInput, take: Int, skip: Int, distinct: [UsageStatsScalarFieldEnum!]): UsageStats
  findManyUsageStats(where: UsageStatsWhereInput, orderBy: [UsageStatsOrderByInput!], cursor: UsageStatsWhereUniqueInput, take: Int, skip: Int, distinct: [UsageStatsScalarFieldEnum!]): [UsageStats!]!
  users(where: UserWhereInput, orderBy: [UserOrderByInput!], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum!]): [User!]!
  hello: String!
  bye: String!
  me: User
}

type UsageStats {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  deployments: Int!
  published: Int!
  projects: Int!
}

# The javascript `Date` as string. Type represents date and time as the ISO Date string.
scalar DateTime

input UsageStatsWhereInput {
  AND: [UsageStatsWhereInput!]
  OR: [UsageStatsWhereInput!]
  NOT: [UsageStatsWhereInput!]
  id: IntFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deployments: IntFilter
  published: IntFilter
  projects: IntFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input NestedIntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input UsageStatsOrderByInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  deployments: SortOrder
  published: SortOrder
  projects: SortOrder
}

enum SortOrder {
  asc
  desc
}

input UsageStatsWhereUniqueInput {
  id: Int
}

enum UsageStatsScalarFieldEnum {
  id
  createdAt
  updatedAt
  deployments
  published
  projects
}

type User {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  username: String!
  tokenVersion: Int!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  username: StringFilter
  password: StringFilter
  tokenVersion: IntFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input UserOrderByInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  username: SortOrder
  password: SortOrder
  tokenVersion: SortOrder
}

input UserWhereUniqueInput {
  id: String
  username: String
}

enum UserScalarFieldEnum {
  id
  createdAt
  updatedAt
  username
  password
  tokenVersion
}

type Mutation {
  createUsageStats(data: UsageStatsCreateInput!): UsageStats!
  revokeRefreshTokensForUser(userId: String!): User!
  registerUser(data: UserInput!): User!
  loginUser(data: UserInput!): LoginResponse!
  logoutUser: Boolean
}

input UsageStatsCreateInput {
  createdAt: DateTime
  updatedAt: DateTime
  deployments: Int!
  published: Int!
  projects: Int!
}

input UserInput {
  username: String!
  password: String!
}

type LoginResponse {
  accessToken: String!
  user: User!
}
